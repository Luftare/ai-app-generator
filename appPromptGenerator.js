function createAppGeneratorPrompt(description, specs, technologies) {
  const specsString = specs.map((s) => "  -" + s).join("\n");
  const technologiesString =
    technologies.map((s) => "  -" + s).join("\n") ||
    "No technology preferences.";

  return `Write me an program with the following spesifications:

Description:
${description}

Specs:
${specsString}

Technologies:
${technologiesString}

Format the output by encoding the file names with source codes under them. Follow this format even with single file output. Do NOT write any other formatting such as \`\`\`html. Your output must start with '#FILE#':

#FILE#<filename 1>
<source code 1>
#FILE#<filename 2>
<source code 2>
...
#FILE#<filename N>
<source code N>

Here is an example:
#FILE#my-app.html
<html>
  <head>
    <link rel="stylesheet" href="my-app.css" />
    <title>My App</title>
  </head>
  <body>
    <h1>Hello World!</h1>
  </body>
</html>
#FILE#my-app.css
body {
  background-color: red;
}`;
}

function createAppModularizationPrompt(specs) {
  return `
I'm building a modular program. Based on my provided specifications, please define needed sub-modules to be developed to build the whole program.
Keep the modules simple enough that each could be generated by asking GPT-3.5-turbo model.

Format your output like this:

#MODULE#<module 1 name>
<prompt for gpt to write module 1>
#MODULE#<module 2 name>
<prompt for gpt to write module 2>
...
#MODULE#<module N name>
<prompt for gpt to write module N>

Here are the specifications for the program to build:
${specs}`;
}

module.exports = { createAppGeneratorPrompt, createAppModularizationPrompt };
